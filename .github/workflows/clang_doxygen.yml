name: CI and Documentation Workflow

on:
  push:
    branches: [ doc ] # Trigger on push to the 'doc' branch for full processing including publish
  pull_request:
    branches: [ main, master ] # Trigger on PRs to 'main' or 'master' for checks

# IMPORTANT: Replace 'your-workflow-filename.yml' in the cache keys below
# with the actual name of this workflow file (e.g., 'ci-docs.yml').
env:
  WORKFLOW_FILE_PATH: '.github/workflows/clang_doxygen.yml' # Define it once

jobs:
  format-check:
    name: Clang-Format Check and Fix # Updated job name
    runs-on: ubuntu-latest
    permissions:
      contents: write # Added: Needed to commit and push formatting fixes
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      # For pushes to 'doc' where we commit, actions/checkout@v4 uses GITHUB_TOKEN
      # which will get 'contents: write' from the job's permissions.

    - name: Cache Clang apt dependencies
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: ${{ runner.os }}-apt-clang-v2-${{ hashFiles(env.WORKFLOW_FILE_PATH) }}
        restore-keys: |
          ${{ runner.os }}-apt-clang-v2-

    - name: Install Clang-Format 20
      run: |
        sudo apt-get update -qq # -qq for quieter output
        # Attempt to install clang-format-20. If already cached, download is skipped/faster.
        sudo apt-get install -y clang-format-20 || {
          echo "Failed to install clang-format-20 directly via apt."
          echo "Attempting to use LLVM's apt repository script..."
          wget -q https://apt.llvm.org/llvm.sh # -q for quiet download
          chmod +x llvm.sh
          sudo ./llvm.sh 20 all
          sudo apt-get update -qq # Update package list again after adding new repo
          sudo apt-get install -y clang-format-20
        }
        if [ -f /usr/bin/clang-format-20 ]; then
          sudo ln -sf /usr/bin/clang-format-20 /usr/bin/clang-format
        fi
        clang-format --version

    - name: Run Clang-Format (Check or Fix) # Updated step name
      run: |
        # Case 1: Push to 'doc' branch - Apply fixes and commit
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/doc" ]]; then
          echo "Push to 'doc' branch: Applying and committing clang-format fixes..."
          
          # Apply clang-format fixes in-place
          # The '-r' option for xargs ensures clang-format is not run if find returns no files.
          find . -regex '.*\.\(cpp\|hpp\|c\|h\|cc\|hh\|m\|mm\|proto\)' -print0 | xargs -0 -r clang-format -i
          echo "Clang-Format fixes applied if necessary."

          # Configure git user
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Add files that clang-format might have modified.
          # We need to find the files again and pass them to git add using xargs -0.
          # The -r option for xargs ensures git add is not run if no files are found.
          find . -regex '.*\.\(cpp\|hpp\|c\|h\|cc\|hh\|m\|mm\|proto\)' -print0 | xargs -0 -r git add
          echo "Target files added to staging area if modified."
          
          # Check if there are any staged changes (i.e., if clang-format modified any files)
          if git diff --staged --quiet; then
            echo "No formatting changes to commit."
          else
            echo "Formatting changes detected. Committing..."
            git commit -m "style: Apply clang-format fixes (${{ github.sha }})" -m "[skip ci]"
            git push origin HEAD:${{ github.ref_name }} # Push to the current branch (doc)
            echo "Committed and pushed clang-format fixes to '${{ github.ref_name }}' branch."
          fi
          echo "Clang-Format fix process complete for 'doc' branch."

        # Case 2: Pull Request to 'main' or 'master' - Check only (error out on failure)
        elif [[ "${{ github.event_name }}" == "pull_request" && \
                ( "${{ github.base_ref }}" == "main" || "${{ github.base_ref }}" == "master" ) ]]; then
          echo "Pull request to 'main'/'master': Running clang-format check..."
          find . -regex '.*\.\(cpp\|hpp\|c\|h\|cc\|hh\|m\|mm\|proto\)' -print0 | xargs -0 -r clang-format --dry-run -Werror
          echo "Clang-Format check passed."
        else
          echo "Clang-Format step skipped for this event combination (${{ github.event_name }} on ${{ github.ref }} targeting ${{ github.base_ref }})."
        fi

  doxygen-process:
    name: Doxygen HTML Generation, Commit & Optional Publish
    runs-on: ubuntu-latest
    needs: format-check
    permissions:
      contents: write   # Required for committing to the branch and for gh-pages deploy
      pages: write      # Required for gh-pages deploy
      id-token: write   # Required for gh-pages deploy
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetches all history, good for git operations

    - name: Cache Doxygen apt dependencies
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: ${{ runner.os }}-apt-doxygen-v2-${{ hashFiles(env.WORKFLOW_FILE_PATH) }}
        restore-keys: |
          ${{ runner.os }}-apt-doxygen-v2-

    - name: Install Doxygen and Graphviz
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y doxygen graphviz

    - name: Check for Doxyfile
      run: |
        if [ ! -f Doxyfile ]; then
          echo "Error: Doxyfile not found in the repository root."
          echo "Please create and commit a Doxyfile."
          exit 1
        fi
        echo "Doxyfile found."

    - name: Run Doxygen
      run: |
        echo "Using Doxyfile:"
        cat Doxyfile
        mkdir -p ./docs # Ensure the output directory exists
        doxygen Doxyfile
        echo "Doxygen HTML output generated in ./docs/"

    - name: Commit and Push Doxygen Output to doc branch
      if: github.event_name == 'push' && github.ref == 'refs/heads/doc'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add ./docs
        if git diff --staged --quiet; then
          echo "No changes in Doxygen output to commit."
        else
          git commit -m "docs: Generate Doxygen documentation (${{ github.sha }})" -m "This commit was auto-generated by GitHub Actions." -m "[skip ci]"
          git push origin HEAD:${{ github.ref_name }}
          echo "Committed and pushed Doxygen output to '${{ github.ref_name }}' branch."
        fi

    - name: Upload Doxygen HTML artifacts
      uses: actions/upload-artifact@v4
      with:
        name: doxygen-html-output-${{ github.event_name }}-${{ github.sha }}
        path: ./docs
        retention-days: 7

    - name: Deploy to GitHub Pages (only on push to 'doc' branch)
      if: github.event_name == 'push' && github.ref == 'refs/heads/doc'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        commit_message: "docs: Deploy Doxygen documentation to Pages (${{ github.sha }})"